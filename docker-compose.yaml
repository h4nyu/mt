version: "2.4"

x-env: &env
  CODECOV_TOKEN: &CODECOV_TOKEN ${CODECOV_TOKEN:-}
  GMO_COIN_API_KEY: &GMO_COIN_API_KEY ${GMO_COIN_API_KEY:-}
  GMO_COIN_SECRET_KEY: &GMO_COIN_SECRET_KEY ${GMO_COIN_SECRET_KEY:-}
  DATABASE_VOLUME: &DATABASE_VOLUME ${DATABASE_VOLUME:-./data/db}
  WEB_PORTL: &WEB_PORT ${WEB_PORT:-3000}
  NOTEBOOK_PORT: &NOTEBOOK_PORT ${NOTEBOOK_PORT:-8888}
  KABUSAPI_URL: &KABUSAPI_URL ${KABUSAPI_URL:-}
  KABUSAPI_WS_URL: &KABUSAPI_WS_URL ${KABUSAPI_WS_URL:-}
  KABUSAPI_PASSWORD: &KABUSAPI_PASSWORD ${KABUSAPI_PASSWORD:-}
  SCRIPT_SERVER_PORT: &SCRIPT_SERVER_PORT ${SCRIPT_SERVER_PORT:-5000}
  ENVIRONMENT: &ENVIRONMENT ${ENVIRONMENT:-local}
  GOOGLE_APPLICATION_CREDENTIALS: &GOOGLE_APPLICATION_CREDENTIALS /app/credentials.json
  BUCKET_NAME: &BUCKET_NAME ${BUCKET_NAME:-staging.kaguya-394811.appspot.com}
  STORAGE_DIR: &STORAGE_DIR /app/data/storage
  STORAGE_VOLUME: &STORAGE_VOLUME ${STORAGE_VOLUME:-./data/storage}

  # internal
  DATABASE_URL: postgres://app:app@db/app
  API_URL: http://api:3000

x-app: &app
  image: "kgy"
  build:
    context: .
  volumes:
    - .:/app
    - type: bind
      source: *STORAGE_VOLUME
      target: *STORAGE_DIR

services:
  db:
    image: "timescale/timescaledb:latest-pg13"
    environment:
      POSTGRES_PASSWORD: app
      POSTGRES_USER: app
    volumes:
      - type: bind
        source: *DATABASE_VOLUME
        target: /var/lib/postgresql/data
    profiles:
      - production
      - development

  collector:
    <<: *app
    working_dir: /app/cli
    command: bash -c 'wait-for-it db:5432 -- yarn cli board collect'
    environment:
      <<: *env
    profiles:
      - production
    depends_on:
      - db
    restart: unless-stopped

  api:
    <<: *app
    working_dir: /app/cli
    command: bash -c 'wait-for-it db:5432 -- yarn cli serve'
    environment:
      <<: *env
    profiles:
      - development

  web:
    <<: *app
    working_dir: /app/web
    command: bash -c 'wait-for-it api:3000 -- yarn dev'
    environment:
      <<: *env
    profiles:
      - development
    depends_on:
      - api
    ports:
      - target: 3000
        published: *WEB_PORT

  script-server:
    <<: *app
    environment:
      <<: *env
    command: ./start.sh
    working_dir: /app/script-server
    ports:
      - target: 5000
        published: *SCRIPT_SERVER_PORT
    profiles:
      - production
      - development

  app:
    <<: *app
    environment:
      <<: *env
    profiles:
      - development

  ml:
    image: "kgy-ml"
    build:
      context: .
      dockerfile: Dockerfile.ml
    volumes:
      - .:/app
    environment:
      <<: *env
    profiles:
      - development

  notebook:
    <<: *app
    command: jupyter notebook --ip 0.0.0.0 --port 8888 --allow-root --NotebookApp.password='' --NotebookApp.token='' --NotebookApp.notebook_dir='/app'
    ports:
      - target: 8888
        published: *NOTEBOOK_PORT
    profiles:
      - development
